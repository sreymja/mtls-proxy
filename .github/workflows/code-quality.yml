name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Code formatting and linting
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Check clippy warnings
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check for unused dependencies
      run: cargo check --all-targets --all-features

  # Code complexity analysis
  complexity:
    name: Code Complexity
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install cargo-tarpaulin for code coverage
      run: cargo install cargo-tarpaulin

    - name: Run code coverage
      run: cargo tarpaulin --out Xml --output-dir coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security and dependency analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Run cargo audit
      run: cargo audit

    - name: Run cargo deny
      run: |
        cargo install cargo-deny
        cargo deny check

    - name: Check for outdated dependencies
      run: |
        cargo install cargo-outdated
        cargo outdated || echo "Some dependencies are outdated"

  # Documentation checks
  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check documentation
      run: |
        # Check that all public APIs are documented
        cargo doc --no-deps --document-private-items
        
        # Check for broken links in documentation
        cargo install cargo-deadlinks
        cargo deadlinks

    - name: Check README
      run: |
        # Check if README exists and has content
        if [ ! -f "README.md" ]; then
          echo "README.md is missing"
          exit 1
        fi
        
        # Check README length
        lines=$(wc -l < README.md)
        if [ "$lines" -lt 50 ]; then
          echo "README.md seems too short ($lines lines)"
          exit 1
        fi

  # Performance regression testing
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev sqlite3

    - name: Generate test certificates
      run: |
        mkdir -p certs
        openssl req -x509 -newkey rsa:4096 -keyout certs/client.key -out certs/client.crt -days 365 -nodes -subj "/CN=test-client"
        openssl req -x509 -newkey rsa:4096 -keyout certs/ca.key -out certs/ca.crt -days 365 -nodes -subj "/CN=test-ca"
        chmod 600 certs/*.key

    - name: Run performance tests
      run: |
        # Run performance tests with timing
        time cargo test --test performance_test -- --nocapture
        
        # Check build time
        time cargo build --release

    - name: Check binary size
      run: |
        cargo build --release
        echo "Binary size:"
        ls -lh target/release/mtls-proxy
