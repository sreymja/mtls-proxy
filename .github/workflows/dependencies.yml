name: Dependencies

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  # Check for dependency updates
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      run: |
        # Manual Rust installation with retry logic
        echo "Installing Rust toolchain with retry logic..."
        
        # Try multiple installation methods
        for method in 1 2 3; do
          echo "Trying installation method $method..."
        
          case $method in
            1)
              # Method 1: Using curl with rustup-init
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --component rustfmt --component clippy --no-modify-path
              ;;
            2)
              # Method 2: Using wget with rustup-init
              wget -O rustup-init.sh https://sh.rustup.rs
              chmod +x rustup-init.sh
              ./rustup-init.sh -y --default-toolchain stable --component rustfmt --component clippy --no-modify-path
              ;;
            3)
              # Method 3: Using the official action as last resort
              echo "Trying official action as last resort..."
              # This will be handled by the next step if this fails
              ;;
          esac
        
          # Check if installation was successful
          if command -v rustc &> /dev/null; then
            echo "Rust installation successful with method $method"
            break
          fi
        
          echo "Method $method failed, waiting 30 seconds before next attempt..."
          sleep 30
        done
        
        # Add to PATH
        source $HOME/.cargo/env
        
        # Verify installation
        rustc --version
        cargo --version
        rustfmt --version
        cargo clippy --version
        
        # If still not installed, try the official action as last resort
        if ! command -v rustc &> /dev/null; then
          echo "Manual installation failed, trying official action..."
          # This will be handled by the next step
        fi

    - name: Install Rust toolchain (Fallback)
      if: failure()
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy
        timeout-minutes: 30

    - name: Check for outdated dependencies
      run: |
        cargo install cargo-outdated
        cargo outdated --exit-code 1 || {
          echo "Found outdated dependencies:"
          cargo outdated
          echo "Consider updating dependencies"
        }

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Check for security vulnerabilities
      run: |
        cargo audit || {
          echo "Security vulnerabilities found:"
          cargo audit
          exit 1
        }

  # Automated dependency updates (creates PR)
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      run: |
        # Manual Rust installation with retry logic
        echo "Installing Rust toolchain with retry logic..."
        
        # Try multiple installation methods
        for method in 1 2 3; do
          echo "Trying installation method $method..."
        
          case $method in
            1)
              # Method 1: Using curl with rustup-init
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --component rustfmt --component clippy --no-modify-path
              ;;
            2)
              # Method 2: Using wget with rustup-init
              wget -O rustup-init.sh https://sh.rustup.rs
              chmod +x rustup-init.sh
              ./rustup-init.sh -y --default-toolchain stable --component rustfmt --component clippy --no-modify-path
              ;;
            3)
              # Method 3: Using the official action as last resort
              echo "Trying official action as last resort..."
              # This will be handled by the next step if this fails
              ;;
          esac
        
          # Check if installation was successful
          if command -v rustc &> /dev/null; then
            echo "Rust installation successful with method $method"
            break
          fi
        
          echo "Method $method failed, waiting 30 seconds before next attempt..."
          sleep 30
        done
        
        # Add to PATH
        source $HOME/.cargo/env
        
        # Verify installation
        rustc --version
        cargo --version
        rustfmt --version
        cargo clippy --version
        
        # If still not installed, try the official action as last resort
        if ! command -v rustc &> /dev/null; then
          echo "Manual installation failed, trying official action..."
          # This will be handled by the next step
        fi

    - name: Install Rust toolchain (Fallback)
      if: failure()
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy
        timeout-minutes: 30

    - name: Update dependencies
      run: |
        # Update Cargo.lock
        cargo update
        
        # Check for major version updates
        cargo install cargo-update
        cargo install-update -a

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: update dependencies'
        body: |
          Automated dependency update
          
          This PR updates the project dependencies to their latest compatible versions.
          
          Please review the changes and test thoroughly before merging.
        branch: update-dependencies
        delete-branch: true
